// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

model Audit {
  id          String      @id @default(uuid()) @db.VarChar(36)
  auditable   String      @db.VarChar(30)
  auditableId String      @db.VarChar(36)
  changeCount Int         @default(0)
  previous    Json?
  incoming    Json?
  action      AuditAction
  username    String?     @db.VarChar(50)
  userId      String      @db.VarChar(36)
  createdAt     DateTime    @default(now())

  @@index([auditable, auditableId])
  @@index([userId])
  @@map("Audit")
}

model Site {
  id          String   @id @default(uuid()) @db.VarChar(36)
  code        String   @unique @db.VarChar(15)
  name        String   @db.VarChar(50)
  location    String   @db.Text
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("Site")
}

model User {
  id          String  @id @default(uuid()) @db.VarChar(36)
  name        String  @unique @db.VarChar(50)
  description String? @db.Text

  fullName    String?       @db.VarChar(100)
  email       String?      @db.VarChar(50)
  phoneNumber String?      @db.VarChar(15)
  password    String       @db.Text
  site        Site?        @relation(fields: [siteId], references: [id])
  siteId      String       @db.VarChar(36)
  roles       UserRole[]
  sessions    Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("User")
}

model Permission {
  id          String  @id @default(uuid()) @db.VarChar(36)
  name        String  @unique @db.VarChar(50)
  description String? @db.Text

  alias String             @unique @db.VarChar(50)
  role  RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Permission")
}

model Role {
  id          String  @id @default(uuid()) @db.VarChar(36)
  name        String  @unique @db.VarChar(50)
  description String? @db.Text

  users       UserRole[]
  permissions RolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Role")
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String     @db.VarChar(36)
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @db.VarChar(36)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([roleId, permissionId])
  @@map("RolePermission")
}

model UserRole {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.VarChar(36)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String @db.VarChar(36)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, roleId])
  @@map("UserRole")
}

model Session {
  id        String   @id @default(uuid()) @db.VarChar(36)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.VarChar(36)
  token     String   @unique @db.Text
  refresh   String   @unique @db.VarChar(255)
  data      Json
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Session")
}
